kairosdb.telnetserver.port=4242
kairosdb.telnetserver.address=0.0.0.0
kairosdb.telnetserver.max_command_size=1024

# Properties that start with kairosdb.service are services that are started
# when kairos starts up.  You can disable services in your custom
# kairosdb.properties file by setting the value to <disabled> ie
# kairosdb.service.telnet=<disabled>
kairosdb.service.telnet=org.kairosdb.core.telnet.TelnetServerModule
kairosdb.service.http=org.kairosdb.core.http.WebServletModule
kairosdb.service.reporter=org.kairosdb.core.reporting.MetricReportingModule

#===============================================================================
#Each factory must be bound in a guice module.  The definition here defines what
#protocol data type the factory services.
#Default data point implementation for long - class must implement LongDataPointFactory
kairosdb.datapoints.factory.long=org.kairosdb.core.datapoints.LongDataPointFactoryImpl
#Default data point implementation for double - class must implement DoubleDataPointFactory
kairosdb.datapoints.factory.double=org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl

kairosdb.datapoints.factory.string=org.kairosdb.core.datapoints.StringDataPointFactory

#===============================================================================
# Uses Quartz Cron syntax - default is to run every minute
kairosdb.reporter.schedule=0 */1 * * * ?

#===============================================================================
# Set to 0 to turn off HTTP port
kairosdb.jetty.port=8080
kairosdb.jetty.address=0.0.0.0
kairosdb.jetty.static_web_root=webroot

# To enable SSL uncomment the following lines and specify the path to the keyStore and its password and port
#kairosdb.jetty.ssl.port=443
#kairosdb.jetty.ssl.protocols=TLSv1, TLSv1.1, TLSv1.2
#kairosdb.jetty.ssl.cipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA
#kairosdb.jetty.ssl.keystore.path=
#kairosdb.jetty.ssl.keystore.password=

#To enable http basic authentication uncomment the following lines and specify
#the user name and password for authentication.
#kairosdb.jetty.basic_auth.user=
#kairosdb.jetty.basic_auth.password=

# To enable thread pooling uncomment the following lines and specify the limits
#kairosdb.jetty.threads.queue_size=6000
#kairosdb.jetty.threads.min=1000
#kairosdb.jetty.threads.max=2500
#kairosdb.jetty.threads.keep_alive_ms=10000

#===============================================================================
kairosdb.service.datastore=org.kairosdb.datastore.h2.H2Module
kairosdb.datastore.concurrentQueryThreads=5
#kairosdb.service.datastore=org.kairosdb.datastore.cassandra.CassandraModule
#kairosdb.service.datastore=org.kairosdb.datastore.remote.RemoteModule


#===============================================================================
#H2 properties
kairosdb.datastore.h2.database_path=build/h2db

#===============================================================================
#Cassandra properties
#host list is in the form> 1.1.1.1:9160,1.1.1.2:9160
kairosdb.datastore.cassandra.host_list=localhost:9160
kairosdb.datastore.cassandra.keyspace=kairosdb
#This value only makes a difference the first time
#kairos is ran and it creates the schema in Cassandra
#If you want to change the replication factor afterwords you will
#need to use the cqlsh command on a Cassandra node.
kairosdb.datastore.cassandra.replication_factor=1
kairosdb.datastore.cassandra.write_delay=1000
kairosdb.datastore.cassandra.write_buffer_max_size=500000
#write_buffer_job_queue_size is the number of write jobs to C* that will be
#queued up before Kairos starts returning errors to the client.  Jobs are
#triggered based on the write_delay.  If the write_delay is set to 1000 then a
#new job is created every 1 second, setting the queue_size to 300 will then give
#you about 5 min of buffering before Kairos starts returning errors to the client
#The buffering is in memory so the higher the value the more memory will be required.
kairosdb.datastore.cassandra.write_buffer_job_queue_size=60
#When reading one row read in 10k
kairosdb.datastore.cassandra.single_row_read_size=10240

#The number of rows to read when doing a multi get
kairosdb.datastore.cassandra.multi_row_size=1000
#The amount of data to read from each row when doing a multi get
kairosdb.datastore.cassandra.multi_row_read_size=1024

#Size of the row key cache size.  This can be monitored by querying
#kairosdb.datastore.write_size and filtering on the tag buffer = row_key_index
#Ideally the data written to the row_key_index should stabilize to zero except
#when data rolls to a new row
kairosdb.datastore.cassandra.row_key_cache_size=10240

kairosdb.datastore.cassandra.string_cache_size=5000

# Uses Quartz Cron syntax - default is to run every five minutes
kairosdb.datastore.cassandra.increase_buffer_size_schedule=0 */5 * * * ?

#Control the required consistency for cassandra operations.
#Available settings are cassandra version dependent:
#http://www.datastax.com/documentation/cassandra/2.0/webhelp/index.html#cassandra/dml/dml_config_consistency_c.html
kairosdb.datastore.cassandra.read_consistency_level=ONE
kairosdb.datastore.cassandra.write_consistency_level=QUORUM

#for cassandra authentication use the following
#kairosdb.datastore.cassandra.auth.[prop name]=[prop value]
#example:
#kairosdb.datastore.cassandra.auth.username=admin
#kairosdb.datastore.cassandra.auth.password=eat_me

#the time to live in seconds for datapoints. After this period the data will be
#deleted automatically. If not set the data will live forever.
#TTLs are added to columns as they're inserted so setting this will not affect
#existing data, only new data.
#kairosdb.datastore.cassandra.datapoint_ttl=31536000

#===============================================================================
# Remote datastore properties
# Load the RemoteListener modules instead of RemoteDatastore if you want to
# fork the flow of data.  This module allows you to continue writting to your
# configured Datastore as well as send data on to a remote Kairos cluster
# Sample use case is to run clusters in parallel before migrating to larger cluster
# Cannot be used in conjunction with the RemoteModule
#kairosdb.service.remote=org.kairosdb.datastore.remote.ListenerModule

# Location to store data locally before it is sent off
kairosdb.datastore.remote.data_dir=.
kairosdb.datastore.remote.remote_url=http://10.92.1.41:8080

# quartz cron schedule for sending data (currently set to 30 min)
kairosdb.datastore.remote.schedule=0 */30 * * * ?

# delay the sending of data for a random number of seconds.
# this prevents all remote kairos nodes from sending data at the same time
# the default of 600 means the data will be sent every half hour plus some some
# delay up to 10 minutes.
kairosdb.datastore.remote.random_delay=0

# Optional prefix filter for remote module.  Only metrics that start with this
# value are forwarded on.
#kairosdb.datastore.remote.prefix_filter=

#===============================================================================
#Uncomment this line to require oauth connections to http server
#kairosdb.service.oauth=org.kairosdb.core.oauth.OAuthModule

#OAuth consumer keys and secrets in the form
#kairosdb.oauth.consumer.[consumer key]=[consumer secret]

#===============================================================================
# Determines if cache files are deleted after being used or not.
# In some cases the cache file can be used again to speed up subsequent queries
# that query the same metric but aggregate the results differently.
kairosdb.query_cache.keep_cache_files=false

# Cache file cleaning schedule. Uses Quartz Cron syntax - this only matters if
# keep_cache_files is set to true
kairosdb.query_cache.cache_file_cleaner_schedule=0 0 12 ? * SUN *

#By default the query cache is located in kairos_cache under the system temp folder as
#defined by java.io.tmpdir system property.  To override set the following value
#kairosdb.query_cache.cache_dir=

#===============================================================================
# Log long running queries, set this to true to record long running queries
# into kairos as the following metrics.
# kairosdb.log.query.remote_address - String data point that is the remote address
#   of the system making the query
# kairosdb.log.query.json - String data point that is the query sent to Kairos
kairosdb.log.queries.enable=false

# Time to live to apply to the above metrics.  This helps limit the mount of space
# used for storing the query information
kairosdb.log.queries.ttl=86400

# Time in seconds.  If the query request time is longer than this value the query
# will be written to the above metrics
kairosdb.log.queries.greater_than=60



#===============================================================================
# Hector configuration

#kairosdb.datastore.cassandra.hector.maxActive=50
#kairosdb.datastore.cassandra.hector.maxWaitTimeWhenExhausted=-1
kairosdb.datastore.cassandra.hector.useSocketKeepalive=true
kairosdb.datastore.cassandra.hector.cassandraThriftSocketTimeout=10000
#kairosdb.datastore.cassandra.hector.retryDownedHosts=true
#kairosdb.datastore.cassandra.hector.retryDownedHostsDelayInSeconds=10
#kairosdb.datastore.cassandra.hector.retryDownedHostsQueueSize=-1
#kairosdb.datastore.cassandra.hector.autoDiscoverHosts=false
#kairosdb.datastore.cassandra.hector.autoDiscoveryDelayInSeconds=30
#kairosdb.datastore.cassandra.hector.autoDiscoveryDataCenters=
#kairosdb.datastore.cassandra.hector.runAutoDiscoveryAtStartup=false
#kairosdb.datastore.cassandra.hector.useHostTimeoutTracker=false
#kairosdb.datastore.cassandra.hector.maxFrameSize=2147483647
#kairosdb.datastore.cassandra.hector.loadBalancingPolicy=roundRobin | leastActive | dynamic
#kairosdb.datastore.cassandra.hector.hostTimeoutCounter=10
#kairosdb.datastore.cassandra.hector.hostTimeoutWindow=500
#kairosdb.datastore.cassandra.hector.hostTimeoutSuspensionDurationInSeconds=10
#kairosdb.datastore.cassandra.hector.hostTimeoutUnsuspendCheckDelay=10
#kairosdb.datastore.cassandra.hector.maxConnectTimeMillis=-1
#kairosdb.datastore.cassandra.hector.maxLastSuccessTimeMillis-1

#===============================================================================
# Health Checks
kairosdb.service.health=org.kairosdb.core.health.HealthCheckModule
#kairosdb.service.rollups=org.kairosdb.rollup.RollUpModule

#Response code to return from a call to /api/v1/health/check
#Some load balancers want 200 instead of 204
kairosdb.health.healthyResponseCode=204

